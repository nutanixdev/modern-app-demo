apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: frontend
  namespace: vod-frontend
  labels:
    app: frontend
    app.kubernetes.io/instance: frontend
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: frontend
    app.kubernetes.io/part-of: frontend-app
  annotations:
    app.openshift.io/vcs-uri: https://github.com/nutanixdev/modern-app-demo.git
    app.openshift.io/vcs-ref: ''
---
kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: frontend
  namespace: vod-frontend
  labels:
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    pipeline.openshift.io/strategy: docker
    pipeline.openshift.io/type: openshift
    app.kubernetes.io/instance: frontend
    app.kubernetes.io/name: frontend
spec:
  params:
  - name: APP_NAME
    type: string
    default: frontend
  - name: GIT_REPO
    type: string
    default: https://github.com/nutanixdev/modern-app-demo.git
  - name: GIT_REVISION
    type: string
    default: ''
  - name: IMAGE_NAME
    type: string
    default: image-registry.openshift-image-registry.svc:5000/vod-frontend/frontend
  - default: src/frontend
    name: PATH_CONTEXT
    type: string
  tasks:
  - name: fetch-repository
    params:
    - name: url
      value: "$(params.GIT_REPO)"
    - name: revision
      value: "$(params.GIT_REVISION)"
    - name: subdirectory
      value: ''
    - name: deleteExisting
      value: 'true'
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
  - name: build
    params:
    - name: IMAGE
      value: "$(params.IMAGE_NAME)"
    - name: TLSVERIFY
      value: 'false'
    - name: CONTEXT
      value: "$(params.PATH_CONTEXT)"
    runAfter:
    - fetch-repository
    taskRef:
      kind: ClusterTask
      name: buildah
    workspaces:
    - name: source
      workspace: workspace
  - name: deploy
    params:
    - name: SCRIPT
      value: oc rollout status dc/$(params.APP_NAME)
    runAfter:
    - build
    taskRef:
      kind: ClusterTask
      name: openshift-client
  workspaces:
  - name: workspace
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: frontend-initial
  namespace: vod-frontend
  labels:
    app.kubernetes.io/instance: frontend
    app.kubernetes.io/name: frontend
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    pipeline.openshift.io/strategy: docker
    pipeline.openshift.io/type: openshift
    tekton.dev/pipeline: frontend
spec:
  pipelineRef:
    name: frontend
  params:
  - name: APP_NAME
    value: frontend
  - name: GIT_REPO
    value: https://github.com/nutanixdev/modern-app-demo.git
  - name: GIT_REVISION
    value: ''
  - name: IMAGE_NAME
    value: image-registry.openshift-image-registry.svc:5000/vod-frontend/frontend
  - name: PATH_CONTEXT
    value: src/frontend
  resources: []
  workspaces:
  - name: workspace
    volumeClaimTemplate:
      metadata:
        labels:
          tekton.dev/pipeline: frontend
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  status:
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: frontend
  namespace: vod-frontend
  labels:
    app: frontend
    app.kubernetes.io/instance: frontend
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: frontend
    app.openshift.io/runtime: python
    app.kubernetes.io/part-of: frontend-app
    app.openshift.io/runtime-version: 3.9-ubi8
  annotations:
    app.openshift.io/vcs-uri: https://github.com/nutanixdev/modern-app-demo.git
    app.openshift.io/vcs-ref: ''
    app.openshift.io/route-disabled: 'false'
spec:
  selector:
    app: frontend
    deploymentconfig: frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: frontend
        deploymentconfig: frontend
    spec:
      containers:
      - name: frontend
        image: frontend:latest
        command: ['/bin/bash', 'run.sh']
        ports:
        - containerPort: 8080
          protocol: TCP
        envFrom:
          - configMapRef:
              name: vod-config
          - secretRef:
              name: vod-postgres
          - secretRef:
              name: vod-objects
        resources: {}
  triggers:
  - type: ImageChange
    imageChangeParams:
      automatic: true
      containerNames:
      - frontend
      from:
        kind: ImageStreamTag
        name: frontend:latest
  - type: ConfigChange
---
kind: Service
apiVersion: v1
metadata:
  name: frontend
  namespace: vod-frontend
  labels:
    app: frontend
    app.kubernetes.io/instance: frontend
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: frontend
    app.openshift.io/runtime: python
    app.kubernetes.io/part-of: frontend-app
    app.openshift.io/runtime-version: 3.9-ubi8
  annotations:
    app.openshift.io/vcs-uri: https://github.com/nutanixdev/modern-app-demo.git
    app.openshift.io/vcs-ref: ''
spec:
  selector:
    app: frontend
    deploymentconfig: frontend
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: 8080-tcp
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: frontend
  namespace: vod-frontend
  labels:
    app: frontend
    app.kubernetes.io/instance: frontend
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: frontend
    app.openshift.io/runtime: python
    app.kubernetes.io/part-of: frontend-app
    app.openshift.io/runtime-version: 3.9-ubi8
  defaultAnnotations:
    app.openshift.io/vcs-uri: https://github.com/nutanixdev/modern-app-demo.git
    app.openshift.io/vcs-ref: ''
spec:
  to:
    kind: Service
    name: frontend
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
    caCertificate: ''
    certificate: ''
    destinationCACertificate: ''
    key: ''
  host: ''
  path: ''
  port:
    targetPort: 8080-tcp
  wildcardPolicy: None